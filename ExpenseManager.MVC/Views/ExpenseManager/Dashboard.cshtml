@model ExpenseManager.Application.DTOS.StatDto
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json;
@inject SignInManager<IdentityUser> SignInManager
@{
    var settingsDto = ViewData["SettingsDto"] as ExpenseManager.Application.DTOS.SettingDto;
}
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<div class="main-rectangle">
    @if (SignInManager.IsSignedIn(User))
    {
        @if (settingsDto.Language == "english")
        {
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/TotalAmount.png")" alt="TotalAmount">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.TotalAmount@settingsDto.Currency</p>
                <p class="stat-text">Total Amount</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/Spent.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.Spent@settingsDto.Currency</p>
                <p class="stat-text">Spent (Month)</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/Left.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.Left@settingsDto.Currency</p>
                <p class="stat-text">Left (Month)</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/SavingGoal.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.SavingGoal.Goal@settingsDto.Currency</p>
                <p class="stat-text">Saving Goal</p>
            </div>
            <select class="chart-selector">
                <!-- for ASP edit-->
                <option>Total Amount</option>
                <option>Spent</option>
                <option>Left</option>
                <option>Saving Goal</option>
            </select>
            <select class="time-selector">
                <!-- for ASP edit-->
                <option>1 week</option>
                <option>1 month</option>
                <option>1 year</option>
            </select>

            <div class="chart">
                <canvas class="dashboard-chart"></canvas> <!--for ASP edit-->
            </div>
        }
        else if (settingsDto.Language == "polski")
        {
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/TotalAmount.png")" alt="TotalAmount">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.TotalAmount@settingsDto.Currency</p>
                <p class="stat-text">Całkowite wpływy</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/Spent.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.Spent@settingsDto.Currency</p>
                <p class="stat-text">Wydano (1 mies)</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/Left.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.Left@settingsDto.Currency</p>
                <p class="stat-text">Zostało (1 mies)</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/SavingGoal.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.SavingGoal.Goal@settingsDto.Currency</p>
                <p class="stat-text">Cel Oszczędnościowy</p>
            </div>
            <select class="chart-selector">
                <!-- for ASP edit-->
                <option>Całkowite wpływy</option>
                <option>Wydano</option>
                <option>Zostało</option>
                <option>Cel Oszczędnościowy</option>
            </select>
            <select class="time-selector">
                <!-- for ASP edit-->
                <option>1 tydzień</option>
                <option>1 miesiąc</option>
                <option>1 rok</option>
            </select>

            <div class="chart">
                <canvas class="dashboard-chart"></canvas> <!--for ASP edit-->
            </div>
        }
        else if (settingsDto.Language == "deutsch")
        {
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/TotalAmount.png")" alt="TotalAmount">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.TotalAmount@settingsDto.Currency</p>
                <p class="stat-text">Gesamtmenge</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/Spent.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.Spent@settingsDto.Currency</p>
                <p class="stat-text">Ausgegebenes (Monat)</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/Left.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.Left@settingsDto.Currency</p>
                <p class="stat-text">bleibt (Monat)</p>
            </div>
            <div class="stats">
                <img class="icon-img" src="@Url.Content("~/images/SavingGoal.png")">
                <img class="more-img" src="@Url.Content("~/Images/more.png")" alt="show more">
                <p class="values">@Model.SavingGoal.Goal@settingsDto.Currency</p>
                <p class="stat-text">Einsparungsziel</p>
            </div>
            <select class="chart-selector">
                <!-- for ASP edit-->
                <option>Gesamtmenge</option>
                <option>Ausgegebenes</option>
                <option>bleibt</option>
                <option>Einsparungsziel</option>
            </select>
            <select class="time-selector">
                <!-- for ASP edit-->
                <option>1 Woche</option>
                <option>1 Monat</option>
                <option>1 Jahr</option>
            </select>

            <div class="chart">
                <canvas class="dashboard-chart"></canvas> <!--for ASP edit-->
            </div>
        }

    }
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js" src="@Url.Content("~/js/site.js")"></script>
<script>
    let transferValues = @Html.Raw(JsonConvert.SerializeObject(ViewData["TransferValues"]));
    let savingGoalValues = @Html.Raw(JsonConvert.SerializeObject(ViewData["SavingGoalValues"]));

    let totalAmountInMonth = Array.from({ length: 12 }, () => 0);
    let totalSpentInMonth = Array.from({ length: 12 }, () => 0);
    let totalLeftInMonth = Array.from({ length: 12 }, () => 0);
    let savingGoalInMonth = Array.from({ length: 12 }, () => 0);

    let totalAmountInDay = Array.from({ length: 12 }, () => Array.from({ length: 31 }, () => 0));
    let totalSpentInDay = Array.from({ length: 12 }, () => Array.from({ length: 31 }, () => 0));
    let totalLeftInDay = Array.from({ length: 12 }, () => Array.from({ length: 31 }, () => 0));
    let savingGoalInDay = Array.from({ length: 12 }, () => Array.from({ length: 31 }, () => 0));


    transferValues.forEach(function (transfer) {
        let transferDate = new Date(transfer.CreatedAt)
        let month = transferDate.getMonth()
        let day = transferDate.getDate()

        if (transfer.Ingoing === true)
            totalAmountInDay[month][day] += transfer.Value
           
            else if (!transfer.Ingoing)
            totalSpentInDay[month][day] += transfer.Value

        totalLeftInDay[month][day] = totalAmountInDay[month][day] - totalSpentInDay[month][day]
    });

    savingGoalValues.forEach(function (savingGoal) {
        let savingGoalDate = new Date(savingGoal.CreatedAt)
        let month = savingGoalDate.getMonth()
        let day = savingGoalDate.getDate()
        if(savingGoalInDay[month][day] == 0) {
            savingGoalInDay[month][day] = savingGoal.Goal
        }
       
    });



    transferValues.forEach(function (transfer) {
        let transferDate = new Date(transfer.CreatedAt).getMonth()
        if (transfer.Ingoing === true)
            totalAmountInMonth[transferDate] += transfer.Value
        
        else if (!transfer.Ingoing)
            totalSpentInMonth[transferDate] += transfer.Value


        totalLeftInMonth[transferDate] = totalAmountInMonth[transferDate] - totalSpentInMonth[transferDate]
    });
 
    savingGoalValues.forEach(function (savingGoal) {
        let savingGoalDate = new Date(savingGoal.CreatedAt).getMonth()
            savingGoalInMonth[savingGoalDate] = savingGoal.Goal

    });
    let canvas = document.querySelector('.dashboard-chart')

    let chartSelector = document.querySelector('.chart-selector')
    let timeSelector = document.querySelector('.time-selector')

    let data = {
        labels: [],
        datasets: [
            {
                data: [],
                borderColor: 'rgba(255, 140, 0, 1)',
                borderWidth: 3,
            },
        ],
    }



    let options = {
        scales: {
            y: {
                beginAtZero: true,
            },
        },
        plugins: {
            legend: {
                display: false,
            },
        },
    }

    let chart = new Chart(canvas, {
        type: 'line',
        data: data,
        options: options,
    })
    

    chartSelector.addEventListener('change', function () {
        let actualMonth = new Date().getMonth();
        let actualDay = new Date().getDate();
        let actualDayRange;
        if(actualDay > 7) {
            actualDayRange = actualDay - 6
        }
        else {
            actualDay = 1
        }

        let tempData = []

        let firstDayOfMonth = new Date(new Date().getFullYear(), actualMonth, 1)
        let lastDayOfMonth = new Date(new Date().getFullYear(), actualMonth + 1, 0)
        let numberOfDays = (lastDayOfMonth - firstDayOfMonth) / (1000 * 60 * 60 * 24) + 1

        if(chartSelector.value === 'Total Amount') {
            if(timeSelector.value === '1 year') {
            data.datasets[0].data = totalAmountInMonth
            data.labels = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
        }
            if(timeSelector.value === '1 month') {
                let label = []
                for(let i = 1; i < numberOfDays; i++)
                    label.push(i.toString())

                data.datasets[0].data = totalAmountInDay[actualMonth]
                data.labels = label
            }
            if (timeSelector.value === '1 week') {
                let label = []
                let counter = 0;
                for (let i = actualDayRange; i <= actualDay; i++) {
                    label.push(i.toString())
                    tempData[counter] = totalAmountInDay[actualMonth][i]
                    counter++
                }
                data.datasets[0].data = tempData
                data.labels = label
            }

            chart.update()
        }
        if (chartSelector.value === 'Spent') {
            if (timeSelector.value === '1 year') {
                data.datasets[0].data = totalSpentInMonth
                data.labels = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
            }
            if (timeSelector.value === '1 month') {
                let label = []
                for (let i = 1; i < numberOfDays; i++)
                    label.push(i.toString())

                data.datasets[0].data = totalSpentInDay[actualMonth]
                data.labels = label
            }

            if (timeSelector.value === '1 week') {
                let label = []
                let counter = 0;
                for (let i = actualDayRange; i <= actualDay; i++) {
                    label.push(i.toString())
                    tempData[counter] = totalSpentInDay[actualMonth][i]
                    counter++
                }
                data.datasets[0].data = tempData
                data.labels = label
            }

            chart.update()
        }
        if (chartSelector.value === 'Left') {
            if (timeSelector.value === '1 year') {
                data.datasets[0].data = totalLeftInMonth
                data.labels = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
            }
            if (timeSelector.value === '1 month') {
                let label = []
                for (let i = 1; i < numberOfDays; i++)
                    label.push(i.toString())

                data.datasets[0].data = totalLeftInDay[actualMonth]
                data.labels = label
            }

            if (timeSelector.value === '1 week') {
                let label = []
                let counter = 0;
                for (let i = actualDayRange; i <= actualDay; i++) {
                    label.push(i.toString())
                    tempData[counter] = totalLeftInDay[actualMonth][i]
                    counter++
                }
                data.datasets[0].data = tempData
                data.labels = label
            }

            chart.update()
        }
        if (chartSelector.value === 'Saving Goal') {
            if (timeSelector.value === '1 year') {
                data.datasets[0].data = savingGoalInMonth
                data.labels = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']

                chart.update()
            }

            if (timeSelector.value === '1 month') {

                let label = []
                for (let i = 1; i <= numberOfDays; i++)
                    label.push(i.toString())

                data.datasets[0].data = savingGoalInDay[actualMonth]
                data.labels = label;

                chart.update()

            }

            if (timeSelector.value === '1 week') {
                let label = []
                let counter = 0;
                for (let i = actualDayRange; i <= actualDay; i++) {
                    label.push(i.toString())
                    tempData[counter] = savingGoalInDay[actualMonth][i]
                    counter++
                }
                data.datasets[0].data = tempData
                data.labels = label

                chart.update()
            }

            

            chart.update()
        }
    })


    
</script>
